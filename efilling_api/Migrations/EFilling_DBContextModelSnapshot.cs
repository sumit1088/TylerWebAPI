// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using efilling_api.Models;

#nullable disable

namespace efilling_api.Migrations
{
    [DbContext(typeof(EFilling_DBContext))]
    partial class EFilling_DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("efilling_api.Models.AdminSupportStaffPermission", b =>
                {
                    b.Property<int?>("AttorneyId")
                        .HasColumnType("integer")
                        .HasColumnName("attorney_id");

                    b.Property<bool?>("IsAuthorized")
                        .HasColumnType("boolean")
                        .HasColumnName("is_authorized");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasIndex("AttorneyId");

                    b.HasIndex("UserId");

                    b.ToTable("admin_support_staff_permission", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.AttorneyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<int?>("BarId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirmID")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool?>("MakeFirmAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool?>("MakeServiceContact")
                        .HasColumnType("boolean");

                    b.Property<bool?>("MakeServiceContactPublic")
                        .HasColumnType("boolean");

                    b.Property<bool?>("MakeUserLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<bool?>("RecFilingStatusEmails")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Suffix")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AttorneyDetails");
                });

            modelBuilder.Entity("efilling_api.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CaseTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("case_title");

                    b.Property<int?>("CaseTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("case_type_id");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("city");

                    b.Property<int?>("ClientMatterNo")
                        .HasColumnType("integer")
                        .HasColumnName("client_matter_no");

                    b.Property<int?>("CourtId")
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<string>("CourtesyEmailNotice")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("courtesy_email_notice");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Directional")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("directional");

                    b.Property<int?>("EnvelopeNo")
                        .HasColumnType("integer")
                        .HasColumnName("envelope_no");

                    b.Property<int?>("FilingForAttorneyId")
                        .HasColumnType("integer")
                        .HasColumnName("filing_for_attorney_id");

                    b.Property<bool?>("FilingInfoIsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("filing_info_is_verified");

                    b.Property<int?>("IncidentZipCourt")
                        .HasColumnType("integer")
                        .HasColumnName("incident_zip_court");

                    b.Property<bool?>("IsAsbestos")
                        .HasColumnType("boolean")
                        .HasColumnName("is_asbestos");

                    b.Property<bool?>("IsCalEnvQualityAct")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cal_env_quality_act");

                    b.Property<bool?>("IsClassAction")
                        .HasColumnType("boolean")
                        .HasColumnName("is_class_action");

                    b.Property<bool?>("IsComplexCase")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complex_case");

                    b.Property<bool?>("IsConditionallySealed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_conditionally_sealed");

                    b.Property<bool?>("IsDeclaratoryInjunctiveRemedy")
                        .HasColumnType("boolean")
                        .HasColumnName("is_declaratory_injunctive_remedy");

                    b.Property<bool?>("IsMonetaryRemedy")
                        .HasColumnType("boolean")
                        .HasColumnName("is_monetary_remedy");

                    b.Property<bool?>("IsPunitiveRemedy")
                        .HasColumnType("boolean")
                        .HasColumnName("is_punitive_remedy");

                    b.Property<int?>("JurisdictionalAmount")
                        .HasColumnType("integer")
                        .HasColumnName("jurisdictional_amount");

                    b.Property<DateTime?>("Modified_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("NoOfCausesOfActions")
                        .HasColumnType("smallint")
                        .HasColumnName("no_of_causes_of_actions");

                    b.Property<string>("NoteToClerk")
                        .HasColumnType("text")
                        .HasColumnName("note_to_clerk");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("postal_code");

                    b.Property<decimal?>("RentPerDayAmount")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("rent_per_day_amount");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("state");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StreetName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street_name");

                    b.Property<short?>("StreetNo")
                        .HasColumnType("smallint")
                        .HasColumnName("street_no");

                    b.Property<int?>("Suffix")
                        .HasColumnType("integer")
                        .HasColumnName("suffix");

                    b.Property<decimal?>("TotalFees")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("total_fees");

                    b.Property<string>("UnitNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit_no");

                    b.Property<int?>("UserPaymentAccId")
                        .HasColumnType("integer")
                        .HasColumnName("user_payment_acc_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("CourtId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FilingForAttorneyId");

                    b.HasIndex("UserPaymentAccId");

                    b.ToTable("cases", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.CaseCategoryCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("damageamountinitial")
                        .HasColumnType("text");

                    b.Property<string>("damageamountsubsequent")
                        .HasColumnType("text");

                    b.Property<string>("ecfcasetype")
                        .HasColumnType("text");

                    b.Property<string>("efspcode")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("procedureremedyinitial")
                        .HasColumnType("text");

                    b.Property<string>("procedureremedysubsequent")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CaseCategoryCodes");
                });

            modelBuilder.Entity("efilling_api.Models.CaseDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<int?>("CourtDocId")
                        .HasColumnType("integer")
                        .HasColumnName("court_doc_id");

                    b.Property<int?>("CourtReservationNo")
                        .HasColumnType("integer")
                        .HasColumnName("court_reservation_no");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("file_name");

                    b.Property<int?>("FiledBy")
                        .HasColumnType("integer")
                        .HasColumnName("filed_by");

                    b.Property<string>("NameExtension")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name_extension");

                    b.Property<int?>("Qty")
                        .HasColumnType("integer")
                        .HasColumnName("qty");

                    b.Property<string>("Security")
                        .HasColumnType("text")
                        .HasColumnName("security");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtDocId");

                    b.HasIndex("FiledBy");

                    b.ToTable("case_documents", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.CaseParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_1");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_2");

                    b.Property<bool?>("AddressUnknown")
                        .HasColumnType("boolean")
                        .HasColumnName("address_unknown");

                    b.Property<int?>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseId1")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_name");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<int?>("FeeExemption")
                        .HasColumnType("integer")
                        .HasColumnName("fee_exemption");

                    b.Property<bool?>("FilingParty")
                        .HasColumnType("boolean")
                        .HasColumnName("filing_party");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("InternationalAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("international_address");

                    b.Property<string>("Interpreter")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("interpreter");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_no");

                    b.Property<int?>("RepresentingAttorneyId")
                        .HasColumnType("integer")
                        .HasColumnName("representing_attorney_id");

                    b.Property<int?>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<bool?>("SaveToAddressBook")
                        .HasColumnType("boolean")
                        .HasColumnName("save_to_address_book");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("state");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("suffix");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<short?>("ZipCode")
                        .HasColumnType("smallint")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseId1")
                        .IsUnique();

                    b.HasIndex("RepresentingAttorneyId");

                    b.ToTable("case_parties", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.CaseServiceContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<bool?>("EServe")
                        .HasColumnType("boolean")
                        .HasColumnName("e_serve");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("service_type");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int?>("UserAttorneyId")
                        .HasColumnType("integer")
                        .HasColumnName("user_attorney_id");

                    b.Property<int?>("UserServiceContactId")
                        .HasColumnType("integer")
                        .HasColumnName("user_service_contact_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserAttorneyId");

                    b.HasIndex("UserServiceContactId");

                    b.ToTable("case_service_contacts", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.CaseServiceContactsDoc", b =>
                {
                    b.Property<int?>("CaseDocId")
                        .HasColumnType("integer")
                        .HasColumnName("case_doc_id");

                    b.Property<DateTime?>("OpenedAt")
                        .HasColumnType("date")
                        .HasColumnName("opened_at");

                    b.Property<int>("ServiceContactId")
                        .HasColumnType("integer")
                        .HasColumnName("service_contact_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasIndex("CaseDocId");

                    b.HasIndex("ServiceContactId");

                    b.ToTable("case_service_contacts_docs", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseStatus")
                        .HasColumnType("integer")
                        .HasColumnName("case_status");

                    b.Property<int?>("CourtId")
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("PrimaryCaseType")
                        .HasColumnType("integer")
                        .HasColumnName("primary_case_type");

                    b.Property<decimal?>("ProviderFee")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("provider_fee");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("case_types", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.CaseTypeCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("casecategory")
                        .HasColumnType("text");

                    b.Property<string>("casestreetaddress")
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("efspcode")
                        .HasColumnType("text");

                    b.Property<string>("fee")
                        .HasColumnType("text");

                    b.Property<string>("initial")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("willfileddate")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CaseTypeCodes");
                });

            modelBuilder.Entity("efilling_api.Models.CaseTypeParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("case_type_id");

                    b.Property<int?>("DemandedParties")
                        .HasColumnType("integer")
                        .HasColumnName("demanded_parties");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("case_type_parties", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.CountryCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CountryCodes");
                });

            modelBuilder.Entity("efilling_api.Models.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("county", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountyId")
                        .HasColumnType("integer")
                        .HasColumnName("county_id");

                    b.Property<bool>("HasOptionalServices")
                        .HasColumnType("boolean")
                        .HasColumnName("has_optional_services");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal?>("TransactionFee")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("transaction_fee");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("court", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.CourtDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourtId")
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<decimal?>("DocFee")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("doc_fee");

                    b.Property<int?>("DocType")
                        .HasColumnType("integer")
                        .HasColumnName("doc_type");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("court_documents", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.Courtdocumenttype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("efspcode")
                        .HasColumnType("text");

                    b.Property<string>("filingcodeid")
                        .HasColumnType("text");

                    b.Property<string>("iscourtuseonly")
                        .HasColumnType("text");

                    b.Property<string>("isdefault")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("promptforconfirmation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courtdocumenttypes");
                });

            modelBuilder.Entity("efilling_api.Models.Courtfilertype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("efspcode")
                        .HasColumnType("text");

                    b.Property<string>("isdefault")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courtfilertypes");
                });

            modelBuilder.Entity("efilling_api.Models.Courtfiletype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("efspcode")
                        .HasColumnType("text");

                    b.Property<string>("extension")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courtfiletypes");
                });

            modelBuilder.Entity("efilling_api.Models.Courtfilingcomponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("allowedfiletypes")
                        .HasColumnType("text");

                    b.Property<string>("allowmultiple")
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("displayorder")
                        .HasColumnType("text");

                    b.Property<string>("efspcode")
                        .HasColumnType("text");

                    b.Property<string>("filingcodeid")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("required")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courtfilingcomponents");
                });

            modelBuilder.Entity("efilling_api.Models.courtlocations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("allowablecardtypes")
                        .HasColumnType("text");

                    b.Property<string>("allowaddservicecontactsoninitial")
                        .HasColumnType("text");

                    b.Property<string>("allowchargeupdate")
                        .HasColumnType("text");

                    b.Property<string>("allowfilingintononindexedcase")
                        .HasColumnType("text");

                    b.Property<string>("allowhearing")
                        .HasColumnType("text");

                    b.Property<string>("allowindividualregistration")
                        .HasColumnType("text");

                    b.Property<string>("allowmaxfeeamount")
                        .HasColumnType("text");

                    b.Property<string>("allowmultipleattorneys")
                        .HasColumnType("text");

                    b.Property<string>("allowpartyid")
                        .HasColumnType("text");

                    b.Property<string>("allowredaction")
                        .HasColumnType("text");

                    b.Property<string>("allowrepcap")
                        .HasColumnType("text");

                    b.Property<string>("allowreturndate")
                        .HasColumnType("text");

                    b.Property<string>("allowserviceoninitial")
                        .HasColumnType("text");

                    b.Property<string>("allowwaiveronmail")
                        .HasColumnType("text");

                    b.Property<string>("allowwaiveronredaction")
                        .HasColumnType("text");

                    b.Property<string>("allowzerofeeswithoutfilingparty")
                        .HasColumnType("text");

                    b.Property<string>("autoassignattorneyservicecontact")
                        .HasColumnType("text");

                    b.Property<string>("autoassignsrlservicecontact")
                        .HasColumnType("text");

                    b.Property<string>("bulkfilingfeeassessorconfiguration")
                        .HasColumnType("text");

                    b.Property<string>("cmsid")
                        .HasColumnType("text");

                    b.Property<string>("cmsservicecontactsupdatesbehavior")
                        .HasColumnType("text");

                    b.Property<string>("cmsservicecontactsupdatesenabled")
                        .HasColumnType("text");

                    b.Property<string>("cmsservicecontactsupdatesfirmid")
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("defaultdocumentdescription")
                        .HasColumnType("text");

                    b.Property<string>("defaultdocumentsecurity")
                        .HasColumnType("text");

                    b.Property<string>("defaultdocumentsecurityenabled")
                        .HasColumnType("text");

                    b.Property<string>("disallowcopyingenvelopemultipletimes")
                        .HasColumnType("text");

                    b.Property<string>("disallowelectronicserviceonnewcontacts")
                        .HasColumnType("text");

                    b.Property<string>("enforceredaction")
                        .HasColumnType("text");

                    b.Property<string>("envelopelevelcommentconfiguration")
                        .HasColumnType("text");

                    b.Property<string>("eserviceconsentenabled")
                        .HasColumnType("text");

                    b.Property<string>("eserviceconsenttextblurbmain")
                        .HasColumnType("text");

                    b.Property<string>("eserviceconsenttextblurbsecondary")
                        .HasColumnType("text");

                    b.Property<string>("eserviceconsenttextblurbsecondaryafterconsentyes")
                        .HasColumnType("text");

                    b.Property<string>("eserviceconsenttextconsentno")
                        .HasColumnType("text");

                    b.Property<string>("eserviceconsenttextconsentnohelp")
                        .HasColumnType("text");

                    b.Property<string>("eserviceconsenttextconsentyes")
                        .HasColumnType("text");

                    b.Property<string>("eserviceconsenttextconsentyeshelp")
                        .HasColumnType("text");

                    b.Property<string>("eserviceconsenttextconsentyeswithadd")
                        .HasColumnType("text");

                    b.Property<string>("eserviceconsenttextconsentyeswithaddhelp")
                        .HasColumnType("text");

                    b.Property<string>("hasconditionalservicetypes")
                        .HasColumnType("text");

                    b.Property<string>("hasprotectedcasetypes")
                        .HasColumnType("text");

                    b.Property<string>("initial")
                        .HasColumnType("text");

                    b.Property<string>("iscounty")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("odysseynodeid")
                        .HasColumnType("text");

                    b.Property<string>("parentnodeid")
                        .HasColumnType("text");

                    b.Property<string>("partialwaiveravailablewaiverpercentages")
                        .HasColumnType("text");

                    b.Property<string>("partialwaivercourtpaymentsystemurl")
                        .HasColumnType("text");

                    b.Property<string>("partialwaiverdurationindays")
                        .HasColumnType("text");

                    b.Property<string>("promptforconfidentialdocuments")
                        .HasColumnType("text");

                    b.Property<string>("promptforconfidentialdocumentsenabled")
                        .HasColumnType("text");

                    b.Property<string>("protectedcasereplacementstring")
                        .HasColumnType("text");

                    b.Property<string>("protectedcasetypes")
                        .HasColumnType("text");

                    b.Property<string>("redactionapiversion")
                        .HasColumnType("text");

                    b.Property<string>("redactiondocumenttype")
                        .HasColumnType("text");

                    b.Property<string>("redactionfee")
                        .HasColumnType("text");

                    b.Property<string>("redactiontargetconfiguration")
                        .HasColumnType("text");

                    b.Property<string>("redactionurl")
                        .HasColumnType("text");

                    b.Property<string>("redactionviewerurl")
                        .HasColumnType("text");

                    b.Property<string>("restrictbankaccountpayment")
                        .HasColumnType("text");

                    b.Property<string>("sendservicebeforereview")
                        .HasColumnType("text");

                    b.Property<string>("sendservicecontactremovednotifications")
                        .HasColumnType("text");

                    b.Property<string>("showdamageamount")
                        .HasColumnType("text");

                    b.Property<string>("showreturnonreject")
                        .HasColumnType("text");

                    b.Property<string>("skippreauth")
                        .HasColumnType("text");

                    b.Property<string>("subsequent")
                        .HasColumnType("text");

                    b.Property<string>("subsequentactionsenabled")
                        .HasColumnType("text");

                    b.Property<string>("transferwaivedfeestocms")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CourtLocations");
                });

            modelBuilder.Entity("efilling_api.Models.CourtOptionalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourtDocId")
                        .HasColumnType("integer")
                        .HasColumnName("court_doc_id");

                    b.Property<int?>("CourtOpSrvType")
                        .HasColumnType("integer")
                        .HasColumnName("court_op_srv_type");

                    b.Property<decimal?>("OpSrvFee")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("op_srv_fee");

                    b.HasKey("Id");

                    b.HasIndex("CourtDocId");

                    b.ToTable("court_optional_services", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.Courtoptionalservices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("altfeedesc")
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("displayorder")
                        .HasColumnType("text");

                    b.Property<string>("efspcode")
                        .HasColumnType("text");

                    b.Property<string>("fee")
                        .HasColumnType("text");

                    b.Property<string>("feeprompttext")
                        .HasColumnType("text");

                    b.Property<string>("filingcodeid")
                        .HasColumnType("text");

                    b.Property<string>("hasfeeprompt")
                        .HasColumnType("text");

                    b.Property<string>("ismprff")
                        .HasColumnType("text");

                    b.Property<bool?>("multiplier")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("required")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courtoptionalservices");
                });

            modelBuilder.Entity("efilling_api.Models.Courtpartytype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("amount")
                        .HasColumnType("text");

                    b.Property<string>("casetypeid")
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("dateofdeath")
                        .HasColumnType("text");

                    b.Property<string>("displayorder")
                        .HasColumnType("text");

                    b.Property<string>("efspcode")
                        .HasColumnType("text");

                    b.Property<bool?>("isavailablefornewparties")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isrequired")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("numberofpartiestoignore")
                        .HasColumnType("text");

                    b.Property<string>("sendforredaction")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courtpartytypes");
                });

            modelBuilder.Entity("efilling_api.Models.filingcodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("amountincontroversy")
                        .HasColumnType("text");

                    b.Property<string>("casecategory")
                        .HasColumnType("text");

                    b.Property<string>("casetypeid")
                        .HasColumnType("text");

                    b.Property<string>("civilclaimamount")
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("efspcode")
                        .HasColumnType("text");

                    b.Property<string>("excludecertificateofservice")
                        .HasColumnType("text");

                    b.Property<string>("fee")
                        .HasColumnType("text");

                    b.Property<string>("filingtype")
                        .HasColumnType("text");

                    b.Property<string>("iscourtuseonly")
                        .HasColumnType("text");

                    b.Property<string>("isproposedorder")
                        .HasColumnType("text");

                    b.Property<string>("iswaiverrequest")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("probateestateamount")
                        .HasColumnType("text");

                    b.Property<string>("useduedate")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Filingcodes");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+Cases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnvelopeNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NoteToClerk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentAccount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SelectedCaseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SelectedCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SelectedCourt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubmittedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalFees")
                        .HasColumnType("numeric");

                    b.Property<string>("courtesyemail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("selectedAttorneySec")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InitialCases");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+Documents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnvelopeNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileBase64")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityTypes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+OptionalServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnvelopeNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Multiplier")
                        .HasColumnType("boolean");

                    b.Property<string>("OptionalServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("OptionalServices");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+Parties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("AddressUnknown")
                        .HasColumnType("boolean");

                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int>("CasesId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnvelopeNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InternationalAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SaveToAddressBook")
                        .HasColumnType("boolean");

                    b.Property<string>("SelectedAttorney")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SelectedPartyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CasesId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+SelectedBarNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BarNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("SelectedBarNumbers");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+SelectedParties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<string>("EnvelopeNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PartyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("SelectedParties");
                });

            modelBuilder.Entity("efilling_api.Models.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LookupName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Lookups");
                });

            modelBuilder.Entity("efilling_api.Models.LookupValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("LookupId")
                        .HasColumnType("integer");

                    b.Property<string>("LookupValue1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("LookupValues");
                });

            modelBuilder.Entity("efilling_api.Models.NameSuffixCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("efspcode")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NameSuffixCodes");
                });

            modelBuilder.Entity("efilling_api.Models.ServeOnlyCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientMatterNo")
                        .HasColumnType("integer")
                        .HasColumnName("client_matter_no");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("serve_only_case", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_1");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_2");

                    b.Property<string>("CcEmails")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cc_emails");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("city");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirmName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("IsActivated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_activated");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Organization")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("organization");

                    b.Property<string>("PasswordEncrypted")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password_encrypted");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_no");

                    b.Property<bool?>("RecieveFilingStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("filing_status");

                    b.Property<string>("SecurityAnswer")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("security_answer");

                    b.Property<string>("SecurityQuestion")
                        .HasColumnType("text")
                        .HasColumnName("security_question");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("state");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("suffix");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.UserAttorney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_1");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_2");

                    b.Property<int?>("BarId")
                        .HasColumnType("integer")
                        .HasColumnName("bar_id");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirmID")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<bool?>("MakeFirmAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("make_firm_admin");

                    b.Property<bool?>("MakeServiceContact")
                        .HasColumnType("boolean")
                        .HasColumnName("make_service_contact");

                    b.Property<bool?>("MakeServiceContactPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("make_service_contact_public");

                    b.Property<bool?>("MakeUserLogin")
                        .HasColumnType("boolean")
                        .HasColumnName("make_user_login");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_no");

                    b.Property<bool?>("RecFilingStatusEmails")
                        .HasColumnType("boolean")
                        .HasColumnName("rec_filing_status_emails");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("state");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("suffix");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<short?>("ZipCode")
                        .HasColumnType("smallint")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_attorneys", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("BarId")
                        .HasColumnType("text");

                    b.Property<string>("CcEmails")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirmName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActivated")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("PasswordEncrypted")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<bool?>("RecieveFilingStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("RegistrationType")
                        .HasColumnType("text");

                    b.Property<string>("SecurityAnswer")
                        .HasColumnType("text");

                    b.Property<string>("SecurityQuestion")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Suffix")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("efilling_api.Models.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool?>("isRead")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("user_notifications", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.UserParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_1");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_2");

                    b.Property<bool?>("AddressUnknown")
                        .HasColumnType("boolean")
                        .HasColumnName("address_unknown");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("InternationalAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("international_address");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_no");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.Property<string>("State")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("state");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("suffix");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<short?>("ZipCode")
                        .HasColumnType("smallint")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_parties", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.UserPaymentAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNickname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_nickname");

                    b.Property<int?>("AccountType")
                        .HasColumnType("integer")
                        .HasColumnName("account_type");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_payment_account", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.UserPreference", b =>
                {
                    b.Property<bool?>("AutoCalFees")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_cal_fees");

                    b.Property<string>("ConvertToTextPdf")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("convert_to_text_pdf");

                    b.Property<int?>("DefaultCaseDesc")
                        .HasColumnType("integer")
                        .HasColumnName("default_case_desc");

                    b.Property<int?>("DefaultCourt")
                        .HasColumnType("integer")
                        .HasColumnName("default_court");

                    b.Property<int?>("DefaultCourtSystem")
                        .HasColumnType("integer")
                        .HasColumnName("default_court_system");

                    b.Property<int?>("DefaultFilingList")
                        .HasColumnType("integer")
                        .HasColumnName("default_filing_list");

                    b.Property<int?>("DefaultPlaintiff")
                        .HasColumnType("integer")
                        .HasColumnName("default_plaintiff");

                    b.Property<int?>("DefaultScreen")
                        .HasColumnType("integer")
                        .HasColumnName("default_screen");

                    b.Property<int?>("DefaultServiceContactSelection")
                        .HasColumnType("integer")
                        .HasColumnName("default_service_contact_selection");

                    b.Property<int?>("DefaultTimzone")
                        .HasColumnType("integer")
                        .HasColumnName("default_timzone");

                    b.Property<bool?>("DetailedFilingReceiptAttached")
                        .HasColumnType("boolean")
                        .HasColumnName("detailed_filing_receipt_attached");

                    b.Property<bool?>("FileStamped")
                        .HasColumnType("boolean")
                        .HasColumnName("file_stamped");

                    b.Property<bool?>("FilingAccepted")
                        .HasColumnType("boolean")
                        .HasColumnName("filing_accepted");

                    b.Property<bool?>("FilingReciepted")
                        .HasColumnType("boolean")
                        .HasColumnName("filing_reciepted");

                    b.Property<string>("FilingRefreshRate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("filing_refresh_rate");

                    b.Property<bool?>("FilingRejected")
                        .HasColumnType("boolean")
                        .HasColumnName("filing_rejected");

                    b.Property<bool?>("FilingStatementAttached")
                        .HasColumnType("boolean")
                        .HasColumnName("filing_statement_attached");

                    b.Property<bool?>("FilingStatusNotif")
                        .HasColumnType("boolean")
                        .HasColumnName("filing_status_notif");

                    b.Property<bool?>("FilingSubmissionFailed")
                        .HasColumnType("boolean")
                        .HasColumnName("filing_submission_failed");

                    b.Property<bool?>("FilingSubmitted")
                        .HasColumnType("boolean")
                        .HasColumnName("filing_submitted");

                    b.Property<bool?>("ServiceUndeliverable")
                        .HasColumnType("boolean")
                        .HasColumnName("service_undeliverable");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasIndex("DefaultPlaintiff");

                    b.HasIndex("DefaultServiceContactSelection");

                    b.HasIndex("UserId");

                    b.ToTable("user_preferences", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.UserResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActivationRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExpirationDateTime")
                        .HasColumnType("text");

                    b.Property<string>("FirmID")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserResponses");
                });

            modelBuilder.Entity("efilling_api.Models.UserRole", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("role")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.UserServiceContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("AdminCopyEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("admin_copy_email");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Firm")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("IsFirm")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<short?>("ZipCode")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_service_contacts", (string)null);
                });

            modelBuilder.Entity("efilling_api.Models.AdminSupportStaffPermission", b =>
                {
                    b.HasOne("efilling_api.Models.UserAttorney", "Attorney")
                        .WithMany()
                        .HasForeignKey("AttorneyId")
                        .HasConstraintName("FK__admin_sup__attor__59FA5E80");

                    b.HasOne("efilling_api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__admin_sup__user___59063A47");

                    b.Navigation("Attorney");

                    b.Navigation("User");
                });

            modelBuilder.Entity("efilling_api.Models.Case", b =>
                {
                    b.HasOne("efilling_api.Models.CaseType", "CaseType")
                        .WithMany("Cases")
                        .HasForeignKey("CaseTypeId")
                        .HasConstraintName("FK__cases__case_type__5DCAEF64");

                    b.HasOne("efilling_api.Models.Court", "Court")
                        .WithMany("Cases")
                        .HasForeignKey("CourtId")
                        .HasConstraintName("FK__cases__court_id__5CD6CB2B");

                    b.HasOne("efilling_api.Models.User", "CreatedByNavigation")
                        .WithMany("Cases")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__cases__created_b__5EBF139D");

                    b.HasOne("efilling_api.Models.UserAttorney", "FilingForAttorney")
                        .WithMany("Cases")
                        .HasForeignKey("FilingForAttorneyId")
                        .HasConstraintName("FK__cases__filing_fo__60A75C0F");

                    b.HasOne("efilling_api.Models.UserPaymentAccount", "UserPaymentAcc")
                        .WithMany("Cases")
                        .HasForeignKey("UserPaymentAccId")
                        .HasConstraintName("FK__cases__user_paym__5FB337D6");

                    b.Navigation("CaseType");

                    b.Navigation("Court");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("FilingForAttorney");

                    b.Navigation("UserPaymentAcc");
                });

            modelBuilder.Entity("efilling_api.Models.CaseDocument", b =>
                {
                    b.HasOne("efilling_api.Models.Case", "Case")
                        .WithMany("CaseDocuments")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK__case_docu__case___6383C8BA");

                    b.HasOne("efilling_api.Models.CourtDocument", "CourtDoc")
                        .WithMany("CaseDocuments")
                        .HasForeignKey("CourtDocId")
                        .HasConstraintName("FK__case_docu__court__6477ECF3");

                    b.HasOne("efilling_api.Models.UserParty", "FiledByNavigation")
                        .WithMany("CaseDocuments")
                        .HasForeignKey("FiledBy")
                        .HasConstraintName("FK__case_docu__filed__656C112C");

                    b.Navigation("Case");

                    b.Navigation("CourtDoc");

                    b.Navigation("FiledByNavigation");
                });

            modelBuilder.Entity("efilling_api.Models.CaseParty", b =>
                {
                    b.HasOne("efilling_api.Models.Case", "Case")
                        .WithMany("CaseParties")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK__case_part__case___68487DD7");

                    b.HasOne("efilling_api.Models.Case", null)
                        .WithOne("CaseParty")
                        .HasForeignKey("efilling_api.Models.CaseParty", "CaseId1");

                    b.HasOne("efilling_api.Models.UserAttorney", "RepresentingAttorney")
                        .WithMany("CaseParties")
                        .HasForeignKey("RepresentingAttorneyId")
                        .HasConstraintName("FK__case_part__repre__693CA210");

                    b.Navigation("Case");

                    b.Navigation("RepresentingAttorney");
                });

            modelBuilder.Entity("efilling_api.Models.CaseServiceContact", b =>
                {
                    b.HasOne("efilling_api.Models.Case", "Case")
                        .WithMany("CaseServiceContacts")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK__case_serv__case___6C190EBB");

                    b.HasOne("efilling_api.Models.UserAttorney", "UserAttorney")
                        .WithMany("CaseServiceContacts")
                        .HasForeignKey("UserAttorneyId")
                        .HasConstraintName("FK__case_serv__user___6D0D32F4");

                    b.HasOne("efilling_api.Models.UserServiceContact", "UserServiceContact")
                        .WithMany("CaseServiceContacts")
                        .HasForeignKey("UserServiceContactId")
                        .HasConstraintName("FK__case_serv__user___6E01572D");

                    b.Navigation("Case");

                    b.Navigation("UserAttorney");

                    b.Navigation("UserServiceContact");
                });

            modelBuilder.Entity("efilling_api.Models.CaseServiceContactsDoc", b =>
                {
                    b.HasOne("efilling_api.Models.CaseDocument", "CaseDoc")
                        .WithMany()
                        .HasForeignKey("CaseDocId")
                        .HasConstraintName("FK__case_serv__case___70DDC3D8");

                    b.HasOne("efilling_api.Models.CaseServiceContact", "ServiceContact")
                        .WithMany()
                        .HasForeignKey("ServiceContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__case_serv__servi__6FE99F9F");

                    b.Navigation("CaseDoc");

                    b.Navigation("ServiceContact");
                });

            modelBuilder.Entity("efilling_api.Models.CaseType", b =>
                {
                    b.HasOne("efilling_api.Models.Court", "Court")
                        .WithMany("CaseTypes")
                        .HasForeignKey("CourtId")
                        .HasConstraintName("FK__case_type__court__3D5E1FD2");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("efilling_api.Models.CaseTypeParty", b =>
                {
                    b.HasOne("efilling_api.Models.CaseType", "CaseType")
                        .WithMany("CaseTypeParties")
                        .HasForeignKey("CaseTypeId")
                        .HasConstraintName("FK__case_type__case___403A8C7D");

                    b.Navigation("CaseType");
                });

            modelBuilder.Entity("efilling_api.Models.Court", b =>
                {
                    b.HasOne("efilling_api.Models.County", "County")
                        .WithMany("Courts")
                        .HasForeignKey("CountyId")
                        .HasConstraintName("FK__court__county_id__3A81B327");

                    b.Navigation("County");
                });

            modelBuilder.Entity("efilling_api.Models.CourtDocument", b =>
                {
                    b.HasOne("efilling_api.Models.Court", "Court")
                        .WithMany("CourtDocuments")
                        .HasForeignKey("CourtId")
                        .HasConstraintName("FK__court_doc__court__4316F928");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("efilling_api.Models.CourtOptionalService", b =>
                {
                    b.HasOne("efilling_api.Models.CourtDocument", "CourtDoc")
                        .WithMany("CourtOptionalServices")
                        .HasForeignKey("CourtDocId")
                        .HasConstraintName("FK__court_opt__court__45F365D3");

                    b.Navigation("CourtDoc");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+Documents", b =>
                {
                    b.HasOne("efilling_api.Models.InitialCaseDetails+Cases", "Case")
                        .WithMany("Documents")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+OptionalServices", b =>
                {
                    b.HasOne("efilling_api.Models.InitialCaseDetails+Documents", "Document")
                        .WithMany("OptionalServices")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+Parties", b =>
                {
                    b.HasOne("efilling_api.Models.InitialCaseDetails+Cases", null)
                        .WithMany("Parties")
                        .HasForeignKey("CasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+SelectedBarNumber", b =>
                {
                    b.HasOne("efilling_api.Models.InitialCaseDetails+Parties", "Party")
                        .WithMany("SelectedBarNumbers")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+SelectedParties", b =>
                {
                    b.HasOne("efilling_api.Models.InitialCaseDetails+Cases", "Case")
                        .WithMany("SelectedParties")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("efilling_api.Models.LookupValue", b =>
                {
                    b.HasOne("efilling_api.Models.Lookup", "Lookup")
                        .WithMany("LookupValues")
                        .HasForeignKey("LookupId");

                    b.Navigation("Lookup");
                });

            modelBuilder.Entity("efilling_api.Models.ServeOnlyCase", b =>
                {
                    b.HasOne("efilling_api.Models.User", "CreatedByNavigation")
                        .WithMany("ServeOnlyCases")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__serve_onl__creat__73BA3083");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("efilling_api.Models.UserAttorney", b =>
                {
                    b.HasOne("efilling_api.Models.User", "User")
                        .WithMany("UserAttorneys")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__user_atto__user___571DF1D5");

                    b.Navigation("User");
                });

            modelBuilder.Entity("efilling_api.Models.UserNotification", b =>
                {
                    b.HasOne("efilling_api.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("efilling_api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__user_noti__user___4E88ABD4");

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("efilling_api.Models.UserParty", b =>
                {
                    b.HasOne("efilling_api.Models.User", "User")
                        .WithMany("UserParties")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__user_part__user___5441852A");

                    b.Navigation("User");
                });

            modelBuilder.Entity("efilling_api.Models.UserPaymentAccount", b =>
                {
                    b.HasOne("efilling_api.Models.User", "User")
                        .WithMany("UserPaymentAccounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__user_paym__user___4CA06362");

                    b.Navigation("User");
                });

            modelBuilder.Entity("efilling_api.Models.UserPreference", b =>
                {
                    b.HasOne("efilling_api.Models.UserParty", "DefaultPlaintiffNavigation")
                        .WithMany()
                        .HasForeignKey("DefaultPlaintiff")
                        .HasConstraintName("FK__user_pref__defau__76969D2E");

                    b.HasOne("efilling_api.Models.UserServiceContact", "DefaultServiceContactSelectionNavigation")
                        .WithMany()
                        .HasForeignKey("DefaultServiceContactSelection")
                        .HasConstraintName("FK__user_pref__defau__778AC167");

                    b.HasOne("efilling_api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_pref__user___75A278F5");

                    b.Navigation("DefaultPlaintiffNavigation");

                    b.Navigation("DefaultServiceContactSelectionNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("efilling_api.Models.UserRole", b =>
                {
                    b.HasOne("efilling_api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_role__user___49C3F6B7");

                    b.Navigation("User");
                });

            modelBuilder.Entity("efilling_api.Models.UserServiceContact", b =>
                {
                    b.HasOne("efilling_api.Models.User", "User")
                        .WithMany("UserServiceContacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__user_serv__user___5165187F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("efilling_api.Models.Case", b =>
                {
                    b.Navigation("CaseDocuments");

                    b.Navigation("CaseParties");

                    b.Navigation("CaseParty");

                    b.Navigation("CaseServiceContacts");
                });

            modelBuilder.Entity("efilling_api.Models.CaseType", b =>
                {
                    b.Navigation("CaseTypeParties");

                    b.Navigation("Cases");
                });

            modelBuilder.Entity("efilling_api.Models.County", b =>
                {
                    b.Navigation("Courts");
                });

            modelBuilder.Entity("efilling_api.Models.Court", b =>
                {
                    b.Navigation("CaseTypes");

                    b.Navigation("Cases");

                    b.Navigation("CourtDocuments");
                });

            modelBuilder.Entity("efilling_api.Models.CourtDocument", b =>
                {
                    b.Navigation("CaseDocuments");

                    b.Navigation("CourtOptionalServices");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+Cases", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Parties");

                    b.Navigation("SelectedParties");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+Documents", b =>
                {
                    b.Navigation("OptionalServices");
                });

            modelBuilder.Entity("efilling_api.Models.InitialCaseDetails+Parties", b =>
                {
                    b.Navigation("SelectedBarNumbers");
                });

            modelBuilder.Entity("efilling_api.Models.Lookup", b =>
                {
                    b.Navigation("LookupValues");
                });

            modelBuilder.Entity("efilling_api.Models.User", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("ServeOnlyCases");

                    b.Navigation("UserAttorneys");

                    b.Navigation("UserParties");

                    b.Navigation("UserPaymentAccounts");

                    b.Navigation("UserServiceContacts");
                });

            modelBuilder.Entity("efilling_api.Models.UserAttorney", b =>
                {
                    b.Navigation("CaseParties");

                    b.Navigation("CaseServiceContacts");

                    b.Navigation("Cases");
                });

            modelBuilder.Entity("efilling_api.Models.UserParty", b =>
                {
                    b.Navigation("CaseDocuments");
                });

            modelBuilder.Entity("efilling_api.Models.UserPaymentAccount", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("efilling_api.Models.UserServiceContact", b =>
                {
                    b.Navigation("CaseServiceContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
